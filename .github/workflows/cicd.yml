name: Test VPN Connection and SSH

on:
  push:
    branches:
      - main  # Or any branch you want to trigger this job on

jobs:
  vpn_test:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout the code (if needed)
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Install dependencies required to build OpenConnect
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential pkg-config libgnutls28-dev libseccomp-dev libreadline-dev libnl-route-3-dev libproxy-dev libxml2-dev git autotools-dev autoconf vpnc-scripts gettext sshpass
      - name: Install vpnc
        run: |
          sudo apt update
          sudo apt install -y vpnc
      
      - name: Search for vpnc-script
        run: |
          SCRIPT_PATH=$(sudo find / -name "vpnc-script" 2>/dev/null | head -n 1)
          if [ -z "$SCRIPT_PATH" ]; then
            echo "vpnc-script not found. Trying to download manually."
            sudo mkdir -p /etc/vpnc/
            sudo wget https://raw.githubusercontent.com/openconnect/openconnect/master/vpnc-script -O /etc/vpnc/vpnc-script
            sudo chmod +x /etc/vpnc/vpnc-script
          else
            echo "vpnc-script found at $SCRIPT_PATH."
            sudo cp "$SCRIPT_PATH" /etc/vpnc/vpnc-script
            sudo chmod +x /etc/vpnc/vpnc-script
          fi

      # 3. Download and build the latest OpenConnect from Git
      - name: Download and build OpenConnect from Git
        run: |
          git clone https://gitlab.com/openconnect/openconnect.git
          cd openconnect
          ./autogen.sh  # Generate the configure script
          ./configure --with-vpnc-script=/etc/vpnc/vpnc-script  # Ensure vpnc-script is present
          make
          sudo make install  # Install OpenConnect
          sudo ldconfig  # Update shared library cache

      # 4. Connect to the VPN using OpenConnect
      - name: Connect to VPN with OpenConnect
        run: |
          # Get the default network interface dynamically
          INTERFACE=$(ip route show | grep '^default' | awk '{print $5}')
          
          # Get the default gateway dynamically
          GATEWAY=$(ip route show | grep '^default' | awk '{print $3}')
          
          # Print interface and gateway for debugging
          echo "Using interface: $INTERFACE"
          echo "Using gateway: $GATEWAY"
          
          # Connect to the VPN and set up routing dynamically
          echo '&5<>~H^`^RAUd'\''%p' | sudo openconnect --user=hamza --servercert pin-sha256:vzleKol/DTwpILfCt89v5Mc7JP0wfLMBDM672JIh5hs= 203.99.49.142 --authgroup=your_auth_group --passwd-on-stdin --background --script /etc/vpnc/vpnc-script && \
          sleep 5 && \
          sudo ip link set tun0 up && \
          (sudo ip route | grep 'default dev tun0' && sudo ip route del default dev tun0) || echo 'No default route for tun0' && \
          sudo ip route add 10.0.0.0/8 dev tun0 && \
          sudo ip route add default via $GATEWAY dev $INTERFACE

          
      - name: Verify VPN connection and IP assignment
        run: |
          ip a show tun0
          ip route show


      # 5. Wait for the VPN interface to be up
      - name: Wait for VPN interface to be up
        run: |
          # Wait up to 30 seconds for the tun0 interface to be up
          for i in {1..30}; do
            if ip a | grep "tun0"; then
              echo "VPN interface tun0 is up."
              break
            else
              echo "Waiting for VPN interface tun0 to be up..."
              sleep 1
            fi
          done

      # 6. Manually bring tun0 interface UP if it's in DOWN state
      - name: Bring tun0 interface up if needed
        run: |
          sudo ip link set dev tun0 up
          ip a  # Check status of tun0 to verify

      

      # 7. Add routes for internal network traffic through the VPN
      - name: Add routes for internal network traffic
        run: |
          # Ensure internal traffic goes through the VPN, while keeping other traffic through default gateway
          sudo ip route add 192.168.10.10 dev tun0  # TMDS internal server
          sudo ip route add 10.16.0.131 dev tun0  # D2SQA internal server
          
      - name: Test connectivity to internal servers
        run: |
          ping -c 3 192.168.10.10 || { echo "Ping to TMDS server failed"; exit 1; }
          ping -c 3 10.16.0.131 || { echo "Ping to D2SQA server failed"; exit 1; }

    
      - name: Test SSH into TMDS and D2SQA with retries
        run: |
          for i in {1..5}; do
            echo "Attempting SSH to TMDS server (Attempt $i)..."
            if sshpass -p 'd2s' ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PreferredAuthentications=password -o PubkeyAuthentication=no tmds03@192.168.10.10 'echo "Successfully SSHed into TMDS"'; then
              echo "Successfully SSHed into TMDS"
              break
            else
              echo "SSH attempt failed. Retrying in 5 seconds..."
              sleep 5
            fi
            if [ $i -eq 5 ]; then
              echo "All SSH attempts failed. Exiting..."
              exit 1
            fi
          done

