name: Test VPN Connection and SSH

on:
  push:
    branches:
      - main  # Or any branch you want to trigger this job on

jobs:
  vpn_test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code (if needed)
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Install dependencies required to build OpenConnect
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential pkg-config libgnutls28-dev libseccomp-dev libreadline-dev libnl-route-3-dev libproxy-dev libxml2-dev git autotools-dev autoconf vpnc-scripts gettext sshpass
      - name: Install vpnc-script
        run: |
          sudo apt-get install -y vpnc-scripts
          sudo mkdir -p /etc/vpnc/
          sudo cp /usr/share/vpnc-scripts/vpnc-script /etc/vpnc/vpnc-script
          sudo chmod +x /etc/vpnc/vpnc-script  # Ensure the script is executable

      # 3. Download and build the latest OpenConnect from Git
      - name: Download and build OpenConnect from Git
        run: |
          git clone https://gitlab.com/openconnect/openconnect.git
          cd openconnect
          ./autogen.sh  # Generate the configure script
          ./configure --with-vpnc-script=/etc/vpnc/vpnc-script  # Ensure vpnc-script is present
          make
          sudo make install  # Install OpenConnect
          sudo ldconfig  # Update shared library cache

     # 4. Check network interfaces and store the correct interface
      - name: Check network interfaces
        id: net_info
        run: |
          ip link show
          interface=$(ip -o link show | awk -F': ' '{print $2}' | grep -E '^(e|w|en|eth|ens|eno|enp)')
          echo "Interface detected: $interface"
          echo "interface=$interface" >> $GITHUB_OUTPUT  # Store the interface name for later
      
      # 5. Connect to VPN with OpenConnect (unchanged)
      - name: Connect to VPN with OpenConnect
        run: |
          echo '&5<>~H^^RAUd'\''%p' | sudo openconnect --user=hamza --servercert pin-sha256:vzleKol/DTwpILfCt89v5Mc7JP0wfLMBDM672JIh5hs= 203.99.49.142 --passwd-on-stdin --background
      
      # 6. Wait for the VPN interface to be up
      - name: Wait for VPN interface to be up
        run: |
          for i in {1..30}; do
            if ip a | grep "vpn0"; then
              echo "VPN interface vpn0 is up."
              break
            else
              echo "Waiting for VPN interface vpn0 to be up..."
              sleep 1
            fi
          done
      
      # 7. Bring vpn0 interface up if needed
      - name: Bring vpn0 interface up if needed
        run: |
          sudo ip link set dev vpn0 up
          ip a  # Check status of vpn0 to verify
      
      # 8. Add routes for internal network traffic through the VPN (if necessary)
      - name: Add routes for internal network traffic
        run: |
          # If needed, add route to 10.16.0.0/16 via vpn0
          sudo ip route add 10.16.0.0/16 dev vpn0
      
      # 9. SSH into TMDS and D2SQA servers
      - name: Test SSH into TMDS and D2SQA
        run: |
          # SSH into TMDS server
          sshpass -p "${{ secrets.TMDS_PASSWORD }}" ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -o PreferredAuthentications=password -o PubkeyAuthentication=no \
          tmds03@192.168.10.10 'bash -s' << 'ENDSSH'
            echo "Successfully SSH'd into TMDS"
      
            # SSH into D2SQA server from TMDS
            sshpass -p "${{ secrets.D2SQA_PASSWORD }}" ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            -o PreferredAuthentications=password -o PubkeyAuthentication=no \
            d2sqa@10.16.0.131 'echo "Successfully SSH'd into D2SQA!"'
          ENDSSH
