name: Test VPN Connection and SSH

on:
  push:
    branches:
      - main  # Or any branch you want to trigger this job on

jobs:
  vpn_test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code (if needed)
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Install dependencies required to build OpenConnect
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential pkg-config libgnutls28-dev libseccomp-dev libreadline-dev libnl-route-3-dev libproxy-dev libxml2-dev git autotools-dev autoconf vpnc-scripts gettext sshpass

      # 3. Download and build the latest OpenConnect from Git
      - name: Download and build OpenConnect from Git
        run: |
          git clone https://gitlab.com/openconnect/openconnect.git
          cd openconnect
          ./autogen.sh  # Generate the configure script
          ./configure --with-vpnc-script=/etc/vpnc/vpnc-script  # Ensure vpnc-script is present
          make
          sudo make install  # Install OpenConnect
          sudo ldconfig  # Update shared library cache

      # 4. Check network interfaces and store the correct interface (wlp3s0, or similar)
      - name: Check network interfaces
        id: net_info
        run: |
          ip link show
          interface=$(ip -o link show | grep wlp | awk -F': ' '{print $2}')
          echo "::set-output name=interface::$interface"  # Store the interface name for later

      # 5. Connect to VPN with OpenConnect, using the detected network interface
      - name: Connect to VPN with OpenConnect
        run: |
          echo '&5<>~H^`^RAUd'\''%p' | sudo openconnect --user=hamza --servercert pin-sha256:vzleKol/DTwpILfCt89v5Mc7JP0wfLMBDM672JIh5hs= 203.99.49.142 --authgroup=your_auth_group --passwd-on-stdin --background
      
      - name: Change ip routes for OpenConnect
        run: |
          sudo ip route del default dev tun0
          sudo ip route add 10.0.0.0/8 dev tun0
          sudo ip route add default via 192.168.18.1 dev ${{ steps.net_info.outputs.interface }}  # Use the detected interface
          sleep 5  # Give VPN time to establish connection

      # 6. Wait for the VPN interface to be up
      - name: Wait for VPN interface to be up
        run: |
          for i in {1..30}; do
            if ip a | grep "tun0"; then
              echo "VPN interface tun0 is up."
              break
            else
              echo "Waiting for VPN interface tun0 to be up..."
              sleep 1
            fi
          done

      # 7. Bring tun0 interface up if needed
      - name: Bring tun0 interface up if needed
        run: |
          sudo ip link set dev tun0 up
          ip a  # Check status of tun0 to verify

      # 8. Add routes for internal network traffic through the VPN
      - name: Add routes for internal network traffic
        run: |
          sudo ip route add 192.168.10.8 dev tun0  # TMDS internal server
          sudo ip route add 10.16.0.131 dev tun0  # D2SQA internal server

      # 9. SSH into TMDS and D2SQA servers
      - name: Test SSH into TMDS and D2SQA
        run: |
          sshpass -p 'd2s' ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PreferredAuthentications=password -o PubkeyAuthentication=no tmds03@192.168.10.10 << 'TMDS_SSH'
            echo "Successfully SSH'd into TMDS"
            
            sshpass -p 'd2sqa' ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PreferredAuthentications=password -o PubkeyAuthentication=no d2sqa@10.16.0.131 << 'D2SQA_SSH'
              echo "Successfully SSH'd into D2SQA!"
            D2SQA_SSH

          TMDS_SSH
